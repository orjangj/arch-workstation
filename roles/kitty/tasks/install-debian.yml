---
- name: Ensure target directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ ansible_user_dir }}/.local/bin"
    - "{{ ansible_user_dir }}/.local/share/applications"
    - "{{ kitty_install_dest }}"

- name: Install tarball from release page
  ansible.builtin.unarchive:
    src: "https://github.com/kovidgoyal/kitty/releases/download/v{{ kitty_version }}/kitty-{{ kitty_version }}-x86_64.txz"
    dest: "{{ kitty_install_dest }}"
    remote_src: yes

- name: Create a symbolic link for the executable
  ansible.builtin.file:
    src: "{{ kitty_install_dest }}/bin/kitty"
    dest: "{{ ansible_user_dir }}/.local/bin/kitty"
    state: link

- name: Gather kitty desktop files
  ansible.builtin.slurp:
    src: "{{ item }}"
  register: files
  with_items:
    - "{{ kitty_install_dest }}/share/applications/kitty.desktop"
    - "{{ kitty_install_dest }}/share/applications/kitty-open.desktop"

- name: Template desktop files in place
  ansible.builtin.copy: 
    dest: "{{ ansible_user_dir }}/.local/share/applications/{{ item['source'] | basename }}"
    content: |-
        {{ item['content'] | b64decode | replace('Exec=kitty', exec) | replace('Icon=kitty', icon) }}
  vars:
    exec: "Exec={{ kitty_install_dest }}/bin/kitty"
    icon: "Icon={{ kitty_install_dest }}/share/icons/hicolor/256x256/apps/kitty.png"
  loop: "{{ files['results'] }}"
  loop_control:
    label: "{{ ansible_user_dir }}/.local/share/applications/{{ item['source'] | basename }}"

